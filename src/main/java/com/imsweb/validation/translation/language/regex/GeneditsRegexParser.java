
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Nov 15 11:19:33 EST 2018
//----------------------------------------------------

package com.imsweb.validation.translation.language.regex;


/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Nov 15 11:19:33 EST 2018
  */
public class GeneditsRegexParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public GeneditsRegexParser() {super();}

  /** Constructor which sets the default scanner. */
  public GeneditsRegexParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public GeneditsRegexParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\054\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\003\005\000\002\003\003\000\002\004\004" +
    "\000\002\004\003\000\002\004\004\000\002\004\003\000" +
    "\002\005\005\000\002\005\005\000\002\006\003\000\002" +
    "\006\005\000\002\006\003\000\002\006\003\000\002\007" +
    "\004\000\002\007\004\000\002\007\004\000\002\007\004" +
    "\000\002\007\004\000\002\007\004\000\002\007\004\000" +
    "\002\007\004\000\002\007\004\000\002\007\004\000\002" +
    "\007\004\000\002\007\004\000\002\007\004\000\002\007" +
    "\004\000\002\007\004\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\066\000\046\004\033\005\015\006\007\007\032\010" +
    "\013\011\020\012\034\013\006\015\025\016\005\020\024" +
    "\022\017\023\022\024\004\025\010\026\030\031\012\032" +
    "\014\001\002\000\060\002\uffdb\004\uffdb\005\uffdb\006\uffdb" +
    "\007\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb\015\uffdb\016" +
    "\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb" +
    "\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\001" +
    "\002\000\046\004\033\005\015\006\007\007\032\010\013" +
    "\011\020\012\034\013\006\015\025\016\005\020\024\022" +
    "\017\023\022\024\004\025\010\026\030\031\012\032\014" +
    "\001\002\000\060\002\uffdc\004\uffdc\005\uffdc\006\uffdc\007" +
    "\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc\015\uffdc\016\uffdc" +
    "\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025" +
    "\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\001\002" +
    "\000\060\002\uffe1\004\uffe1\005\uffe1\006\uffe1\007\uffe1\010" +
    "\uffe1\011\uffe1\012\uffe1\013\uffe1\015\uffe1\016\uffe1\017\uffe1" +
    "\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026" +
    "\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\001\002\000\060" +
    "\002\uffda\004\uffda\005\uffda\006\uffda\007\uffda\010\uffda\011" +
    "\uffda\012\uffda\013\uffda\015\uffda\016\uffda\017\uffda\020\uffda" +
    "\021\uffda\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027" +
    "\uffda\030\uffda\031\uffda\032\uffda\001\002\000\060\002\ufffb" +
    "\004\033\005\015\006\007\007\032\010\013\011\020\012" +
    "\034\013\006\015\025\016\005\017\ufffb\020\024\021\ufffb" +
    "\022\017\023\022\024\004\025\010\026\030\027\ufffb\030" +
    "\ufffb\031\012\032\014\001\002\000\060\002\uffd8\004\uffd8" +
    "\005\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8\013" +
    "\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8" +
    "\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031" +
    "\uffd8\032\uffd8\001\002\000\060\002\uffdf\004\uffdf\005\uffdf" +
    "\006\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf\015" +
    "\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf" +
    "\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032" +
    "\uffdf\001\002\000\062\002\ufff3\004\ufff3\005\ufff3\006\ufff3" +
    "\007\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014\064\015" +
    "\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3" +
    "\024\ufff3\025\ufff3\026\ufff3\027\ufff3\030\ufff3\031\ufff3\032" +
    "\ufff3\001\002\000\060\002\uffe2\004\uffe2\005\uffe2\006\uffe2" +
    "\007\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\015\uffe2\016" +
    "\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2" +
    "\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\001" +
    "\002\000\004\002\000\001\002\000\060\002\uffd7\004\uffd7" +
    "\005\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7\013" +
    "\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7" +
    "\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031" +
    "\uffd7\032\uffd7\001\002\000\060\002\uffde\004\uffde\005\uffde" +
    "\006\uffde\007\uffde\010\uffde\011\uffde\012\uffde\013\uffde\015" +
    "\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde" +
    "\024\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032" +
    "\uffde\001\002\000\004\002\063\001\002\000\060\002\uffd6" +
    "\004\uffd6\005\uffd6\006\uffd6\007\uffd6\010\uffd6\011\uffd6\012" +
    "\uffd6\013\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6" +
    "\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030" +
    "\uffd6\031\uffd6\032\uffd6\001\002\000\060\002\ufff4\004\ufff4" +
    "\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\013" +
    "\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4" +
    "\023\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4\031" +
    "\ufff4\032\ufff4\001\002\000\046\004\033\005\015\006\007" +
    "\007\032\010\013\011\020\012\034\013\006\015\025\016" +
    "\005\020\024\022\017\023\022\024\004\025\010\026\030" +
    "\031\012\032\014\001\002\000\040\004\057\005\047\006" +
    "\060\007\042\010\054\011\043\012\045\013\052\014\044" +
    "\024\053\025\051\026\050\027\056\031\055\032\046\001" +
    "\002\000\060\002\ufff9\004\033\005\015\006\007\007\032" +
    "\010\013\011\020\012\034\013\006\015\025\016\005\017" +
    "\ufff9\020\024\021\ufff9\022\017\023\022\024\004\025\010" +
    "\026\030\027\ufff9\030\ufff9\031\012\032\014\001\002\000" +
    "\060\002\ufff6\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6" +
    "\011\ufff6\012\ufff6\013\ufff6\015\ufff6\016\ufff6\017\ufff6\020" +
    "\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6" +
    "\027\ufff6\030\ufff6\031\ufff6\032\ufff6\001\002\000\060\002" +
    "\uffd9\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9" +
    "\012\uffd9\013\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021" +
    "\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9" +
    "\030\uffd9\031\uffd9\032\uffd9\001\002\000\014\002\ufffd\017" +
    "\ufffd\021\ufffd\027\035\030\036\001\002\000\060\002\uffe0" +
    "\004\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0\012" +
    "\uffe0\013\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0" +
    "\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030" +
    "\uffe0\031\uffe0\032\uffe0\001\002\000\060\002\uffe3\004\uffe3" +
    "\005\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3\013" +
    "\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3" +
    "\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031" +
    "\uffe3\032\uffe3\001\002\000\060\002\uffdd\004\uffdd\005\uffdd" +
    "\006\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd\015" +
    "\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd" +
    "\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032" +
    "\uffdd\001\002\000\046\004\033\005\015\006\007\007\032" +
    "\010\013\011\020\012\034\013\006\015\025\016\005\020" +
    "\024\022\017\023\022\024\004\025\010\026\030\031\012" +
    "\032\014\001\002\000\046\004\033\005\015\006\007\007" +
    "\032\010\013\011\020\012\034\013\006\015\025\016\005" +
    "\020\024\022\017\023\022\024\004\025\010\026\030\031" +
    "\012\032\014\001\002\000\010\002\ufffe\017\ufffe\021\ufffe" +
    "\001\002\000\010\002\uffff\017\uffff\021\uffff\001\002\000" +
    "\014\002\ufffa\017\ufffa\021\ufffa\027\ufffa\030\ufffa\001\002" +
    "\000\060\002\uffef\004\uffef\005\uffef\006\uffef\007\uffef\010" +
    "\uffef\011\uffef\012\uffef\013\uffef\015\uffef\016\uffef\017\uffef" +
    "\020\uffef\021\uffef\022\uffef\023\uffef\024\uffef\025\uffef\026" +
    "\uffef\027\uffef\030\uffef\031\uffef\032\uffef\001\002\000\060" +
    "\002\uffed\004\uffed\005\uffed\006\uffed\007\uffed\010\uffed\011" +
    "\uffed\012\uffed\013\uffed\015\uffed\016\uffed\017\uffed\020\uffed" +
    "\021\uffed\022\uffed\023\uffed\024\uffed\025\uffed\026\uffed\027" +
    "\uffed\030\uffed\031\uffed\032\uffed\001\002\000\060\002\uffea" +
    "\004\uffea\005\uffea\006\uffea\007\uffea\010\uffea\011\uffea\012" +
    "\uffea\013\uffea\015\uffea\016\uffea\017\uffea\020\uffea\021\uffea" +
    "\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea\030" +
    "\uffea\031\uffea\032\uffea\001\002\000\060\002\uffec\004\uffec" +
    "\005\uffec\006\uffec\007\uffec\010\uffec\011\uffec\012\uffec\013" +
    "\uffec\015\uffec\016\uffec\017\uffec\020\uffec\021\uffec\022\uffec" +
    "\023\uffec\024\uffec\025\uffec\026\uffec\027\uffec\030\uffec\031" +
    "\uffec\032\uffec\001\002\000\060\002\uffe4\004\uffe4\005\uffe4" +
    "\006\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4\015" +
    "\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4" +
    "\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032" +
    "\uffe4\001\002\000\060\002\ufff1\004\ufff1\005\ufff1\006\ufff1" +
    "\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\015\ufff1\016" +
    "\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1" +
    "\025\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1\001" +
    "\002\000\060\002\uffe9\004\uffe9\005\uffe9\006\uffe9\007\uffe9" +
    "\010\uffe9\011\uffe9\012\uffe9\013\uffe9\015\uffe9\016\uffe9\017" +
    "\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9" +
    "\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\001\002\000" +
    "\060\002\uffe7\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7" +
    "\011\uffe7\012\uffe7\013\uffe7\015\uffe7\016\uffe7\017\uffe7\020" +
    "\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7" +
    "\027\uffe7\030\uffe7\031\uffe7\032\uffe7\001\002\000\060\002" +
    "\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb" +
    "\012\uffeb\013\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021" +
    "\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb" +
    "\030\uffeb\031\uffeb\032\uffeb\001\002\000\060\002\uffe8\004" +
    "\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8" +
    "\013\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022" +
    "\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8" +
    "\031\uffe8\032\uffe8\001\002\000\060\002\uffee\004\uffee\005" +
    "\uffee\006\uffee\007\uffee\010\uffee\011\uffee\012\uffee\013\uffee" +
    "\015\uffee\016\uffee\017\uffee\020\uffee\021\uffee\022\uffee\023" +
    "\uffee\024\uffee\025\uffee\026\uffee\027\uffee\030\uffee\031\uffee" +
    "\032\uffee\001\002\000\060\002\uffe5\004\uffe5\005\uffe5\006" +
    "\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\015\uffe5" +
    "\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024" +
    "\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5" +
    "\001\002\000\060\002\uffe6\004\uffe6\005\uffe6\006\uffe6\007" +
    "\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\015\uffe6\016\uffe6" +
    "\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025" +
    "\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\001\002" +
    "\000\060\002\ufff2\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010" +
    "\ufff2\011\ufff2\012\ufff2\013\ufff2\015\ufff2\016\ufff2\017\ufff2" +
    "\020\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2\026" +
    "\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2\001\002\000\060" +
    "\002\ufff0\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\011" +
    "\ufff0\012\ufff0\013\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0" +
    "\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0\027" +
    "\ufff0\030\ufff0\031\ufff0\032\ufff0\001\002\000\004\021\062" +
    "\001\002\000\060\002\ufff7\004\ufff7\005\ufff7\006\ufff7\007" +
    "\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\015\ufff7\016\ufff7" +
    "\017\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7\025" +
    "\ufff7\026\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7\001\002" +
    "\000\004\002\001\001\002\000\004\032\065\001\002\000" +
    "\060\002\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5" +
    "\011\ufff5\012\ufff5\013\ufff5\015\ufff5\016\ufff5\017\ufff5\020" +
    "\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5" +
    "\027\ufff5\030\ufff5\031\ufff5\032\ufff5\001\002\000\014\002" +
    "\ufffc\017\ufffc\021\ufffc\027\ufffc\030\ufffc\001\002\000\004" +
    "\017\070\001\002\000\060\002\ufff8\004\ufff8\005\ufff8\006" +
    "\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8\015\ufff8" +
    "\016\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8\024" +
    "\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\066\000\020\002\020\003\015\004\030\005\010\006" +
    "\025\007\026\010\022\001\001\000\002\001\001\000\016" +
    "\003\066\004\030\005\010\006\025\007\026\010\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\004\065\005\010\006\025\007\026\010\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\003\060\004\030\005\010\006\025\007" +
    "\026\010\022\001\001\000\002\001\001\000\014\004\040" +
    "\005\010\006\025\007\026\010\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\003\037\004" +
    "\030\005\010\006\025\007\026\010\022\001\001\000\016" +
    "\003\036\004\030\005\010\006\025\007\026\010\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$GeneditsRegexParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$GeneditsRegexParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$GeneditsRegexParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : " + message);
        throw new RuntimeException(m.toString());
    }

    public void report_fatal_error(String message, Object info) {
        StringBuffer m = new StringBuffer("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : " + message);
        throw new RuntimeException(m.toString());
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$GeneditsRegexParser$actions {
  private final GeneditsRegexParser parser;

  /** Constructor */
  CUP$GeneditsRegexParser$actions(GeneditsRegexParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$GeneditsRegexParser$do_action(
    int                        CUP$GeneditsRegexParser$act_num,
    java_cup.runtime.lr_parser CUP$GeneditsRegexParser$parser,
    java.util.Stack            CUP$GeneditsRegexParser$stack,
    int                        CUP$GeneditsRegexParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$GeneditsRegexParser$result;

      /* select the action based on the action number */
      switch (CUP$GeneditsRegexParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // symbol ::= RIGHT_PAR 
            {
              String RESULT =null;
		 RESULT = "\\)"; 
              CUP$GeneditsRegexParser$result = parser.getSymbolFactory().newSymbol("symbol",6, ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()), RESULT);
            }
          return CUP$GeneditsRegexParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // symbol ::= LEFT_PAR 
            {
              String RESULT =null;
		 RESULT = "\\("; 
              CUP$GeneditsRegexParser$result = parser.getSymbolFactory().newSymbol("symbol",6, ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()), RESULT);
            }
          return CUP$GeneditsRegexParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // symbol ::= PERIOD 
            {
              String RESULT =null;
		 RESULT = "\\."; 
              CUP$GeneditsRegexParser$result = parser.getSymbolFactory().newSymbol("symbol",6, ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()), RESULT);
            }
          return CUP$GeneditsRegexParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // symbol ::= DASH 
            {
              String RESULT =null;
		 RESULT = "\\-"; 
              CUP$GeneditsRegexParser$result = parser.getSymbolFactory().newSymbol("symbol",6, ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()), RESULT);
            }
          return CUP$GeneditsRegexParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // symbol ::= STAR 
            {
              String RESULT =null;
		 RESULT = "*"; 
              CUP$GeneditsRegexParser$result = parser.getSymbolFactory().newSymbol("symbol",6, ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()), RESULT);
            }
          return CUP$GeneditsRegexParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // symbol ::= PLUS 
            {
              String RESULT =null;
		 RESULT = "+"; 
              CUP$GeneditsRegexParser$result = parser.getSymbolFactory().newSymbol("symbol",6, ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()), RESULT);
            }
          return CUP$GeneditsRegexParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // symbol ::= DIGIT 
            {
              String RESULT =null;
		 RESULT = "\\d"; 
              CUP$GeneditsRegexParser$result = parser.getSymbolFactory().newSymbol("symbol",6, ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()), RESULT);
            }
          return CUP$GeneditsRegexParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // symbol ::= BLANK 
            {
              String RESULT =null;
		 RESULT = "\\s"; 
              CUP$GeneditsRegexParser$result = parser.getSymbolFactory().newSymbol("symbol",6, ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()), RESULT);
            }
          return CUP$GeneditsRegexParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // symbol ::= LOWER 
            {
              String RESULT =null;
		 RESULT = "[a-z]"; 
              CUP$GeneditsRegexParser$result = parser.getSymbolFactory().newSymbol("symbol",6, ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()), RESULT);
            }
          return CUP$GeneditsRegexParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // symbol ::= UPPER 
            {
              String RESULT =null;
		 RESULT = "[A-Z]"; 
              CUP$GeneditsRegexParser$result = parser.getSymbolFactory().newSymbol("symbol",6, ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()), RESULT);
            }
          return CUP$GeneditsRegexParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // symbol ::= ALPHA 
            {
              String RESULT =null;
		 RESULT = "[A-Za-z]"; 
              CUP$GeneditsRegexParser$result = parser.getSymbolFactory().newSymbol("symbol",6, ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()), RESULT);
            }
          return CUP$GeneditsRegexParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // symbol ::= CHAR 
            {
              String RESULT =null;
		 RESULT = "."; 
              CUP$GeneditsRegexParser$result = parser.getSymbolFactory().newSymbol("symbol",6, ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()), RESULT);
            }
          return CUP$GeneditsRegexParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // symbol ::= NO_BLANK 
            {
              String RESULT =null;
		 RESULT = "[^ \\t\\r\\n\\v\\f]"; 
              CUP$GeneditsRegexParser$result = parser.getSymbolFactory().newSymbol("symbol",6, ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()), RESULT);
            }
          return CUP$GeneditsRegexParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // symbol ::= ALPHA_NUMERIC 
            {
              String RESULT =null;
		 RESULT = "[A-Za-z0-9]"; 
              CUP$GeneditsRegexParser$result = parser.getSymbolFactory().newSymbol("symbol",6, ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()), RESULT);
            }
          return CUP$GeneditsRegexParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // escaped_symbol ::= ESCAPE LITERAL 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()).right;
		java.lang.String l = (java.lang.String)((java_cup.runtime.Symbol) CUP$GeneditsRegexParser$stack.peek()).value;
		 RESULT = l; 
              CUP$GeneditsRegexParser$result = parser.getSymbolFactory().newSymbol("escaped_symbol",5, ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.elementAt(CUP$GeneditsRegexParser$top-1)), ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()), RESULT);
            }
          return CUP$GeneditsRegexParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // escaped_symbol ::= ESCAPE PERIOD 
            {
              String RESULT =null;
		 RESULT = "\\."; 
              CUP$GeneditsRegexParser$result = parser.getSymbolFactory().newSymbol("escaped_symbol",5, ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.elementAt(CUP$GeneditsRegexParser$top-1)), ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()), RESULT);
            }
          return CUP$GeneditsRegexParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // escaped_symbol ::= ESCAPE COMMA 
            {
              String RESULT =null;
		 RESULT = ","; 
              CUP$GeneditsRegexParser$result = parser.getSymbolFactory().newSymbol("escaped_symbol",5, ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.elementAt(CUP$GeneditsRegexParser$top-1)), ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()), RESULT);
            }
          return CUP$GeneditsRegexParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // escaped_symbol ::= ESCAPE STAR 
            {
              String RESULT =null;
		 RESULT = "\\*"; 
              CUP$GeneditsRegexParser$result = parser.getSymbolFactory().newSymbol("escaped_symbol",5, ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.elementAt(CUP$GeneditsRegexParser$top-1)), ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()), RESULT);
            }
          return CUP$GeneditsRegexParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // escaped_symbol ::= ESCAPE PLUS 
            {
              String RESULT =null;
		 RESULT = "\\+"; 
              CUP$GeneditsRegexParser$result = parser.getSymbolFactory().newSymbol("escaped_symbol",5, ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.elementAt(CUP$GeneditsRegexParser$top-1)), ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()), RESULT);
            }
          return CUP$GeneditsRegexParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // escaped_symbol ::= ESCAPE DASH 
            {
              String RESULT =null;
		 RESULT = "\\-"; 
              CUP$GeneditsRegexParser$result = parser.getSymbolFactory().newSymbol("escaped_symbol",5, ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.elementAt(CUP$GeneditsRegexParser$top-1)), ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()), RESULT);
            }
          return CUP$GeneditsRegexParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // escaped_symbol ::= ESCAPE RANGE 
            {
              String RESULT =null;
		 RESULT = ":"; 
              CUP$GeneditsRegexParser$result = parser.getSymbolFactory().newSymbol("escaped_symbol",5, ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.elementAt(CUP$GeneditsRegexParser$top-1)), ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()), RESULT);
            }
          return CUP$GeneditsRegexParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // escaped_symbol ::= ESCAPE DIGIT 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()).right;
		java.lang.String d = (java.lang.String)((java_cup.runtime.Symbol) CUP$GeneditsRegexParser$stack.peek()).value;
		 RESULT = d; 
              CUP$GeneditsRegexParser$result = parser.getSymbolFactory().newSymbol("escaped_symbol",5, ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.elementAt(CUP$GeneditsRegexParser$top-1)), ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()), RESULT);
            }
          return CUP$GeneditsRegexParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // escaped_symbol ::= ESCAPE BLANK 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()).right;
		java.lang.String b = (java.lang.String)((java_cup.runtime.Symbol) CUP$GeneditsRegexParser$stack.peek()).value;
		 RESULT = b; 
              CUP$GeneditsRegexParser$result = parser.getSymbolFactory().newSymbol("escaped_symbol",5, ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.elementAt(CUP$GeneditsRegexParser$top-1)), ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()), RESULT);
            }
          return CUP$GeneditsRegexParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // escaped_symbol ::= ESCAPE LOWER 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()).right;
		java.lang.String l = (java.lang.String)((java_cup.runtime.Symbol) CUP$GeneditsRegexParser$stack.peek()).value;
		 RESULT = l; 
              CUP$GeneditsRegexParser$result = parser.getSymbolFactory().newSymbol("escaped_symbol",5, ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.elementAt(CUP$GeneditsRegexParser$top-1)), ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()), RESULT);
            }
          return CUP$GeneditsRegexParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // escaped_symbol ::= ESCAPE UPPER 
            {
              String RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()).right;
		java.lang.String u = (java.lang.String)((java_cup.runtime.Symbol) CUP$GeneditsRegexParser$stack.peek()).value;
		 RESULT = u; 
              CUP$GeneditsRegexParser$result = parser.getSymbolFactory().newSymbol("escaped_symbol",5, ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.elementAt(CUP$GeneditsRegexParser$top-1)), ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()), RESULT);
            }
          return CUP$GeneditsRegexParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // escaped_symbol ::= ESCAPE ALPHA 
            {
              String RESULT =null;
		int aaleft = ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()).right;
		java.lang.String aa = (java.lang.String)((java_cup.runtime.Symbol) CUP$GeneditsRegexParser$stack.peek()).value;
		 RESULT = aa; 
              CUP$GeneditsRegexParser$result = parser.getSymbolFactory().newSymbol("escaped_symbol",5, ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.elementAt(CUP$GeneditsRegexParser$top-1)), ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()), RESULT);
            }
          return CUP$GeneditsRegexParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // escaped_symbol ::= ESCAPE CHAR 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()).right;
		java.lang.String c = (java.lang.String)((java_cup.runtime.Symbol) CUP$GeneditsRegexParser$stack.peek()).value;
		 RESULT = c; 
              CUP$GeneditsRegexParser$result = parser.getSymbolFactory().newSymbol("escaped_symbol",5, ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.elementAt(CUP$GeneditsRegexParser$top-1)), ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()), RESULT);
            }
          return CUP$GeneditsRegexParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // escaped_symbol ::= ESCAPE NO_BLANK 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()).right;
		java.lang.String n = (java.lang.String)((java_cup.runtime.Symbol) CUP$GeneditsRegexParser$stack.peek()).value;
		 RESULT = n; 
              CUP$GeneditsRegexParser$result = parser.getSymbolFactory().newSymbol("escaped_symbol",5, ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.elementAt(CUP$GeneditsRegexParser$top-1)), ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()), RESULT);
            }
          return CUP$GeneditsRegexParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // escaped_symbol ::= ESCAPE ALPHA_NUMERIC 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()).right;
		java.lang.String a = (java.lang.String)((java_cup.runtime.Symbol) CUP$GeneditsRegexParser$stack.peek()).value;
		 RESULT = a; 
              CUP$GeneditsRegexParser$result = parser.getSymbolFactory().newSymbol("escaped_symbol",5, ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.elementAt(CUP$GeneditsRegexParser$top-1)), ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()), RESULT);
            }
          return CUP$GeneditsRegexParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // pattern_char ::= LITERAL 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()).right;
		java.lang.String l = (java.lang.String)((java_cup.runtime.Symbol) CUP$GeneditsRegexParser$stack.peek()).value;
		 RESULT = l; 
              CUP$GeneditsRegexParser$result = parser.getSymbolFactory().newSymbol("pattern_char",4, ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()), RESULT);
            }
          return CUP$GeneditsRegexParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // pattern_char ::= symbol 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$GeneditsRegexParser$stack.peek()).value;
		 RESULT = s; 
              CUP$GeneditsRegexParser$result = parser.getSymbolFactory().newSymbol("pattern_char",4, ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()), RESULT);
            }
          return CUP$GeneditsRegexParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // pattern_char ::= LITERAL RANGE LITERAL 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.elementAt(CUP$GeneditsRegexParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.elementAt(CUP$GeneditsRegexParser$top-2)).right;
		java.lang.String l = (java.lang.String)((java_cup.runtime.Symbol) CUP$GeneditsRegexParser$stack.elementAt(CUP$GeneditsRegexParser$top-2)).value;
		int llleft = ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()).left;
		int llright = ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()).right;
		java.lang.String ll = (java.lang.String)((java_cup.runtime.Symbol) CUP$GeneditsRegexParser$stack.peek()).value;
		 RESULT = "[" + l + "-" + ll + "]"; 
              CUP$GeneditsRegexParser$result = parser.getSymbolFactory().newSymbol("pattern_char",4, ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.elementAt(CUP$GeneditsRegexParser$top-2)), ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()), RESULT);
            }
          return CUP$GeneditsRegexParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // pattern_char ::= escaped_symbol 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$GeneditsRegexParser$stack.peek()).value;
		 RESULT = s; 
              CUP$GeneditsRegexParser$result = parser.getSymbolFactory().newSymbol("pattern_char",4, ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()), RESULT);
            }
          return CUP$GeneditsRegexParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sub_pattern ::= LEFT_BRACKET group RIGHT_BRACKET 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.elementAt(CUP$GeneditsRegexParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.elementAt(CUP$GeneditsRegexParser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$GeneditsRegexParser$stack.elementAt(CUP$GeneditsRegexParser$top-1)).value;
		 	RESULT = "(";
       	if (p.equals("(+)"))
			RESULT = RESULT + "\\+";
    	else if (p.equals("(*)"))
    		RESULT = RESULT + "\\*";
    	else
    		RESULT = RESULT + p;
       	RESULT = RESULT +  ")"; 
              CUP$GeneditsRegexParser$result = parser.getSymbolFactory().newSymbol("sub_pattern",3, ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.elementAt(CUP$GeneditsRegexParser$top-2)), ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()), RESULT);
            }
          return CUP$GeneditsRegexParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sub_pattern ::= LEFT_BRACE group RIGHT_BRACE 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.elementAt(CUP$GeneditsRegexParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.elementAt(CUP$GeneditsRegexParser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$GeneditsRegexParser$stack.elementAt(CUP$GeneditsRegexParser$top-1)).value;
		
        RESULT = "(";
    	if (p.equals("(+)"))
    		RESULT = RESULT + "\\+";
    	else if (p.equals("(*)"))
    		RESULT = RESULT + "\\*";
    	else
    		RESULT = RESULT + p;
        RESULT = RESULT + ")"; 
              CUP$GeneditsRegexParser$result = parser.getSymbolFactory().newSymbol("sub_pattern",3, ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.elementAt(CUP$GeneditsRegexParser$top-2)), ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()), RESULT);
            }
          return CUP$GeneditsRegexParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // pattern ::= pattern_char 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$GeneditsRegexParser$stack.peek()).value;
		 RESULT = c; 
              CUP$GeneditsRegexParser$result = parser.getSymbolFactory().newSymbol("pattern",2, ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()), RESULT);
            }
          return CUP$GeneditsRegexParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // pattern ::= pattern_char pattern 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.elementAt(CUP$GeneditsRegexParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.elementAt(CUP$GeneditsRegexParser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$GeneditsRegexParser$stack.elementAt(CUP$GeneditsRegexParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$GeneditsRegexParser$stack.peek()).value;
		 RESULT = c + p; 
              CUP$GeneditsRegexParser$result = parser.getSymbolFactory().newSymbol("pattern",2, ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.elementAt(CUP$GeneditsRegexParser$top-1)), ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()), RESULT);
            }
          return CUP$GeneditsRegexParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // pattern ::= sub_pattern 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$GeneditsRegexParser$stack.peek()).value;
		 RESULT = s; 
              CUP$GeneditsRegexParser$result = parser.getSymbolFactory().newSymbol("pattern",2, ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()), RESULT);
            }
          return CUP$GeneditsRegexParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // pattern ::= sub_pattern pattern 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.elementAt(CUP$GeneditsRegexParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.elementAt(CUP$GeneditsRegexParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$GeneditsRegexParser$stack.elementAt(CUP$GeneditsRegexParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$GeneditsRegexParser$stack.peek()).value;
		 RESULT = s + p; 
              CUP$GeneditsRegexParser$result = parser.getSymbolFactory().newSymbol("pattern",2, ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.elementAt(CUP$GeneditsRegexParser$top-1)), ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()), RESULT);
            }
          return CUP$GeneditsRegexParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // group ::= pattern 
            {
              String RESULT =null;
		int ppleft = ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()).right;
		String pp = (String)((java_cup.runtime.Symbol) CUP$GeneditsRegexParser$stack.peek()).value;
		 RESULT =   "(" + pp + ")"; 
              CUP$GeneditsRegexParser$result = parser.getSymbolFactory().newSymbol("group",1, ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()), RESULT);
            }
          return CUP$GeneditsRegexParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // group ::= pattern PIPE group 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.elementAt(CUP$GeneditsRegexParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.elementAt(CUP$GeneditsRegexParser$top-2)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$GeneditsRegexParser$stack.elementAt(CUP$GeneditsRegexParser$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$GeneditsRegexParser$stack.peek()).value;
		 RESULT =  "(" + p + ")|" + g; 
              CUP$GeneditsRegexParser$result = parser.getSymbolFactory().newSymbol("group",1, ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.elementAt(CUP$GeneditsRegexParser$top-2)), ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()), RESULT);
            }
          return CUP$GeneditsRegexParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // group ::= pattern COMMA group 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.elementAt(CUP$GeneditsRegexParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.elementAt(CUP$GeneditsRegexParser$top-2)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$GeneditsRegexParser$stack.elementAt(CUP$GeneditsRegexParser$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$GeneditsRegexParser$stack.peek()).value;
		 RESULT =  "(" + p + ")|" + g; 
              CUP$GeneditsRegexParser$result = parser.getSymbolFactory().newSymbol("group",1, ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.elementAt(CUP$GeneditsRegexParser$top-2)), ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()), RESULT);
            }
          return CUP$GeneditsRegexParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // expression ::= group 
            {
              String RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$GeneditsRegexParser$stack.peek()).value;
		 RESULT = g; 
              CUP$GeneditsRegexParser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()), RESULT);
            }
          return CUP$GeneditsRegexParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= expression EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.elementAt(CUP$GeneditsRegexParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.elementAt(CUP$GeneditsRegexParser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$GeneditsRegexParser$stack.elementAt(CUP$GeneditsRegexParser$top-1)).value;
		RESULT = start_val;
              CUP$GeneditsRegexParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.elementAt(CUP$GeneditsRegexParser$top-1)), ((java_cup.runtime.Symbol)CUP$GeneditsRegexParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$GeneditsRegexParser$parser.done_parsing();
          return CUP$GeneditsRegexParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

