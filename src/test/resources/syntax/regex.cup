/*
  Cup definition of the Genedits syntax.
*/

package com.imsweb.validation.translation.language.regex;

parser code {:

    public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : " + message);
        throw new RuntimeException(m.toString());
    }

    public void report_fatal_error(String message, Object info) {
        StringBuffer m = new StringBuffer("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : " + message);
        throw new RuntimeException(m.toString());
    }
:};

terminal java.lang.String ALPHA_NUMERIC, NO_BLANK, CHAR, ALPHA, UPPER, LOWER, BLANK, DIGIT, RANGE, ESCAPE;
terminal java.lang.String LEFT_BRACE, RIGHT_BRACE, LEFT_BRACKET, RIGHT_BRACKET, LEFT_PAR, RIGHT_PAR;
terminal java.lang.String PLUS, STAR;
terminal java.lang.String DASH, COMMA, PIPE, PERIOD;
terminal java.lang.String LITERAL;

non terminal String expression, group, pattern, sub_pattern, pattern_char, escaped_symbol, symbol;

precedence left LEFT_BRACE, RIGHT_BRACE, LEFT_BRACKET, RIGHT_BRACKET, RANGE, LITERAL;
precedence left COMMA, PIPE;

start with expression;

expression ::=
    group:g
    {: RESULT = g; :}
    ;

group ::=
    pattern:p COMMA group:g
    {: RESULT =  "(" + p + ")|" + g; :}
    | pattern:p PIPE group:g
    {: RESULT =  "(" + p + ")|" + g; :}
    | pattern:pp
    {: RESULT =   "(" + pp + ")"; :}
    ;

pattern ::=
    sub_pattern:s pattern:p
    {: RESULT = s + p; :}
    | sub_pattern:s
    {: RESULT = s; :}
    | pattern_char:c pattern:p
    {: RESULT = c + p; :}
    | pattern_char:c
    {: RESULT = c; :}
    ;

sub_pattern ::=
    LEFT_BRACE group:p RIGHT_BRACE
    {:
        RESULT = "(";
    	if (p.equals("(+)"))
    		RESULT = RESULT + "\\+";
    	else if (p.equals("(*)"))
    		RESULT = RESULT + "\\*";
    	else
    		RESULT = RESULT + p;
        RESULT = RESULT + ")"; :}
    | LEFT_BRACKET group:p RIGHT_BRACKET
    {: 	RESULT = "(";
       	if (p.equals("(+)"))
			RESULT = RESULT + "\\+";
    	else if (p.equals("(*)"))
    		RESULT = RESULT + "\\*";
    	else
    		RESULT = RESULT + p;
       	RESULT = RESULT +  ")"; :}
    ;

pattern_char ::=
    escaped_symbol:s
    {: RESULT = s; :}
    | LITERAL:l RANGE LITERAL:ll
    {: RESULT = "[" + l + "-" + ll + "]"; :}
    | symbol:s
    {: RESULT = s; :}
    | LITERAL:l
    {: RESULT = l; :}
    ;

escaped_symbol ::=
    ESCAPE ALPHA_NUMERIC:a
    {: RESULT = a; :}
    | ESCAPE NO_BLANK:n
    {: RESULT = n; :}
    | ESCAPE CHAR:c
    {: RESULT = c; :}
    | ESCAPE ALPHA:aa
    {: RESULT = aa; :}
    | ESCAPE UPPER:u
    {: RESULT = u; :}
    | ESCAPE LOWER:l
    {: RESULT = l; :}
    | ESCAPE BLANK:b
    {: RESULT = b; :}
    | ESCAPE DIGIT:d
    {: RESULT = d; :}
    | ESCAPE RANGE
    {: RESULT = ":"; :}
    | ESCAPE DASH
    {: RESULT = "\\-"; :}
    | ESCAPE PLUS
    {: RESULT = "\\+"; :}
    | ESCAPE STAR
    {: RESULT = "\\*"; :}
    | ESCAPE COMMA
    {: RESULT = ","; :}
    | ESCAPE PERIOD
    {: RESULT = "\\."; :}
    | ESCAPE LITERAL:l
    {: RESULT = l; :}
    ;

symbol ::=
    ALPHA_NUMERIC
    {: RESULT = "[A-Za-z0-9]"; :}
    | NO_BLANK
    {: RESULT = "[^ \\t\\r\\n\\v\\f]"; :}
    | CHAR
    {: RESULT = "."; :}
    | ALPHA
    {: RESULT = "[A-Za-z]"; :}
    | UPPER
    {: RESULT = "[A-Z]"; :}
    | LOWER
    {: RESULT = "[a-z]"; :}
    | BLANK
    {: RESULT = "\\s"; :}
    | DIGIT
    {: RESULT = "\\d"; :}
    | PLUS
    {: RESULT = "+"; :}
    | STAR
    {: RESULT = "*"; :}
    | DASH
    {: RESULT = "\\-"; :}
    | PERIOD
    {: RESULT = "\\."; :}
    | LEFT_PAR
    {: RESULT = "\\("; :}
    | RIGHT_PAR
    {: RESULT = "\\)"; :}
    ;

